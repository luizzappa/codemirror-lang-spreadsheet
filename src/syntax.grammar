@top Program { start }

start { formulaWithEq | formula | arrayFormula }

// Just different ways to pass the formula
formulaWithEq { eqop formula }
arrayFormula { openCurlyParen eqop formula closeCurlyParen }

formula {  
  referenceWrap
  | Constant 
  | FunctionCall 
  | ConstantArray 
  | OpenParen formula CloseParen
}

Constant { NumberToken | TextToken | BoolToken | ErrorToken }

// Arrays
ConstantArray { openCurlyParen ArrayColumns closeCurlyParen }
ArrayColumns { ArrayRows (semicolon ArrayRows)* }
ArrayRows { ArrayConstant (comma ArrayConstant)* }
ArrayConstant { Constant | arrayPrefixOp NumberToken | RefErrorToken }
arrayPrefixOp { plusop | minop | at }

// Functions
FunctionCall {
  Function Arguments CloseParen
  | (plusop | minop | !unaryPreFix at) formula
  | formula !unaryPostFix percentop
  | formulaInfixOp
}
formulaInfixOp { 
    formula !exponentiation expop formula
  | formula !multiplication mulop formula
  | formula !multiplication divop formula
  | formula !addition plusop formula
  | formula !addition minop formula
  | formula !concatenation concatop formula
  | formula !comparsion gtop formula
  | formula !comparsion eqop formula
  | formula !comparsion ltop formula
  | formula !comparsion neqop formula
  | formula !comparsion gteop formula
  | formula !comparsion lteop formula
}

Arguments { Argument (comma Argument)* }
Argument { formula | "" }

// References
referenceWrap {
  Reference
  | OpenParen Reference !paren CloseParen
}

Reference { 
  ReferenceItem 
  | ReferenceFunctionCall
  | referencePrefix ReferenceItem
}

ReferenceItem { 
  CellToken 
  | NameToken 
  | VerticalRangeToken 
  | HorizontalRangeToken
  | RefErrorToken
}

referencePrefix {
  SheetToken
  | QuoteS SheetQuotedToken
  | MultipleSheetsToken
  | QuoteS MultipleSheetsQuotedToken
  | RefErrorToken
}

ReferenceFunctionCall {
   referenceWrap !range colon referenceWrap
 | referenceWrap !union intersecop referenceWrap
 | OpenParen Union CloseParen
 | Reference !unaryPostFix hash

}

Union { Reference (!union comma Reference)+ }

@external tokens isIntersecop from "./tokens" { intersecop }

@external specialize { NameToken } isBoolean from "./tokens" {
  BoolToken
}

// RefErrorToken { "#REF!" } // i18n
// ErrorToken { "#NULL!" | "#DIV/0!" | "#VALUE!" | "#NAME?" | "#NUM!" | "#N/A" | "#GETTING_DATA" | "#SPILL!" } // i18n
@external specialize { refHashtag } isRefErrorToken from "./tokens" {
  RefErrorToken,
  ErrorToken
}

@precedence {
  paren @left,
  range @left,
  union @left,
  unaryPreFix @left,
  unaryPostFix @left,
  exponentiation @left,
  multiplication @left,
  addition @left,
  concatenation @left,
  comparsion @left
}

@tokens {

  @precedence { 
    HorizontalRangeToken,
    MultipleSheetsQuotedToken,
    SheetQuotedToken,
    MultipleSheetsToken,
    TextToken,
    SheetToken,
    NumberToken,
    Function,
    VerticalRangeToken,
    CellToken,
    NameToken,
    refHashtag,
    hash,
    at,
    plusop,
    space
  }

  space { $[ \t\n\r]+ }

  // Symbols
  at { "@" }
  comma { "," }
  colon { ":" }
  hash { "#" }
  semicolon { ";" }
  OpenParen[closedBy=CloseParen] { "(" }
  CloseParen[openedBy="OpenParen | Function"] { ")" }
  closeCurlyParen { "}" }
  openCurlyParen { "{" }
  QuoteS { "'" }
  decimalSeparator { "." }

  // Operators
  mulop { "*" }
  plusop { "+" }
  divop { "/" }
  minop { "-" }
  concatop { "&" }
  expop { "^" }
  percentop { "%" }
  gtop { ">" }
  eqop { "=" }
  ltop { "<" }
  neqop { "<>" }
  gteop { ">=" }
  lteop { "<=" }

  // Literals
  NumberToken { 
   @digit+ (decimalSeparator @digit*)? 
   | decimalSeparator @digit+
  }
  TextToken { "\"" ( "\"\"" | !["])* "\"" }
  refHashtag { hash $[A-Z]+ $[A-Z0-9!/_?Ú]* }

  Function[closedBy=CloseParen] { $[a-zA-Z_]+ $[a-zA-Z_0-9.]* OpenParen }

  column { $[$]? @asciiLetter @asciiLetter? @asciiLetter? }
  row { $[$]? @digit+ }
  VerticalRangeToken { column ":" column }
  HorizontalRangeToken { row ":" row }
  CellToken { column row }
  NameToken { $[a-zA-Z\\_] $[a-zA-Z0-9_\\\.?€]* }

  normalSheetName { !['\*\[\]\\:/?();{}#=<>&\-^%, ]+ }
  quotedSheetName { (!['\*\[\]\\:/?] | "''")+ }
  SheetToken { normalSheetName "!"}
  SheetQuotedToken { quotedSheetName "'!" }
  MultipleSheetsToken { normalSheetName ":" normalSheetName "!" }
  MultipleSheetsQuotedToken { quotedSheetName ":" quotedSheetName "'!"}

}

@skip { space }
